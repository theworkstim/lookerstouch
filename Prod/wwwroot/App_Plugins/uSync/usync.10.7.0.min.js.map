{"version":3,"sources":["../../changedialog.controller.js","../../usync.hub.js","../../usync.service.js","../../components/usync.progressview.component.js","../../components/usync.reportview.component.js","../../settings/expansion.controller.js","../../settings/importdialog.controller.js","../../settings/settings.controller.js","../../settings/usync.controller.js","../../backoffice/usync/usync.dashboard.controller.js"],"names":["angular","module","controller","$scope","assetsService","vm","this","getTypeName","typeName","substring","lastIndexOf","item","model","loadJs","then","details","forEach","detail","index","oldValueDiff","oldValue","newValueDiff","newValue","oldValueJson","Object","JSON","stringify","newValueJson","diff","Diff","diffWords","close","pageTitle","change","itemType","name","factory","$rootScope","$q","starting","callbacks","scripts","Umbraco","Sys","ServerVariables","umbracoSettings","umbracoPath","initHub","callback","url","push","undefined","$","connection","promises","script","all","length","cb","pop","hubSetup","initializeHub","uSync","signalRHub","signalR","HubConnectionBuilder","withUrl","withAutomaticReconnect","configureLogging","LogLevel","Warning","build","hub","active","start","catch","console","warn","e","cd","on","eventName","result","$apply","invoke","methodName","done","$http","serviceRoot","uSyncService","getSettings","get","getChangedSettings","getHandlers","set","getHandlerSetSettings","getDefaultSet","getSets","getSelectableSets","report","group","clientId","post","exportItems","clean","importItems","force","put","importItem","saveSettings","settings","getActionHandlers","options","action","reportHandler","handler","folder","importHandler","importPost","actions","exportHandler","cleanExport","startProcess","finishProcess","getLoadedHandlers","getAddOns","getAddOnSplash","getHandlerGroups","getSyncWarnings","checkVersion","downloadExport","httpPath","payload","responseType","response","success","headers","filename","disposition","indexOf","matches","exec","replace","getFileName","contentType","blob","Blob","data","type","navigator","msSaveBlob","saveBlob","webkitSaveBlob","mozSaveBlob","ex","log","urlCreator","window","URL","webkitURL","mozURL","msURL","link","document","createElement","createObjectURL","setAttribute","event","createEvent","initMouseEvent","dispatchEvent","location","open","resolve","reject","errorMsg","status","downloadPost","uSyncProgressViewComponent","templateUrl","application","applicationPath","bindings","update","hideLabels","controllerAs","calcPercentage","count","total","component","uSyncReportViewComponent","results","hideAction","hideLink","showAll","hideToggle","allowSelect","selection","editorService","overlayService","uSync8DashboardService","hasFailedDetail","some","showChange","getIcon","getChangeClass","classString","exception","__selected","countChanges","changes","val","key","openDetail","title","view","$onInit","apply","applyState","error","select","_","findIndex","x","splice","appPluginsPath","size","disableBackdropClick","disableEscKey","disableSubmitButton","closeButtonLabelKey","loading","addons","Upload","notificationsService","submit","errors","uploaded","buttonState","file","handleFiles","files","upload","fields","cleanImport","config","ExceptionMessage","working","readonly","docslink","umbracoVersion","version","Message","openAppSettingsOverlay","appSetting","toPascal","o","newO","origKey","newKey","value","Array","map","toCamel","hasOwnProperty","charAt","toUpperCase","slice","toString","constructor","content","hideSubmitButton","confirm","setname","defaultSet","handlerSet","sets","$controller","eventsService","localizationService","uSyncHub","fresh","versionLoaded","reported","syncing","showSpinner","showEverything","groups","perf","showAdvanced","hasuSyncForms","canHaveForms","modes","NONE","REPORT","IMPORT","EXPORT","initSet","currentSet","isSingle","keys","icon","groupInfo","toLowerCase","state","import","defaultButton","labelKey","importGroup","subButtons","importForce","export","exportGroup","everything","handlers","performAction","actionMethod","message","runHandlerAction","alias","getClientId","concat","performHandlerAction","resetStatus","getWarnings","performance","now","exceptionMessage","emit","time","duration","moment","savings","show","humanize","godo","calculateTimeSaved","localizeMany","values","submitButtonLabel","closeButtonLabel","runmode","reportAction","versionInfo","IsCurrent","umbType","Total","changeSet","downloadExportFolder","overlayView","getExportFolderAsFile","n","loadSavingsMessages","showFileActions","warnings","mode","connectionId","exportButtons","$timeout","navigationService","_settingsFolder","selectNavigationItem","page","description","navigation","disabledDashboard","syncTree","tree","path","addOnString","addOns","insertOffset","displayName"],"mappings":"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","file":"usync.10.7.0.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    function changeDialogController($scope, assetsService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n\r\n        var jsdiff = 'lib/jsdiff/diff.js';\r\n\r\n        assetsService.loadJs(jsdiff, $scope).then(function () {\r\n            calcDiffs();\r\n        });\r\n\r\n        vm.close = close;\r\n        vm.getTypeName = getTypeName;\r\n        vm.pageTitle = pageTitle;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function pageTitle() {\r\n            return vm.item.change + ' ' + getTypeName(vm.item.itemType) + ' ' + vm.item.name;\r\n        }\r\n\r\n        function calcDiffs() {\r\n\r\n            vm.item.details.forEach(function (detail, index) {\r\n\r\n\r\n                let oldValueDiff = detail.oldValue === null ? \"\" : detail.oldValue;\r\n                let newValueDiff = detail.newValue === null ? \"\" : detail.newValue;\r\n\r\n                if (detail.oldValueJson instanceof Object) {\r\n                    oldValueDiff = JSON.stringify(detail.oldValue, null, 1);\r\n                }\r\n\r\n                if (detail.newValueJson instanceof Object) {\r\n                    newValueDiff = JSON.stringify(detail.newValue, null, 1);\r\n                }\r\n\r\n                detail.diff = Diff.diffWords(oldValueDiff, newValueDiff );\r\n            });\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncChangeDialogController', changeDialogController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncHub($rootScope, $q, assetsService) {\r\n\r\n        var starting = false;\r\n        var callbacks = []; \r\n\r\n        var scripts = [\r\n            Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath + '/lib/signalr/signalr.min.js']\r\n\r\n        var resource = {\r\n            initHub: initHub\r\n        };\r\n\r\n        return resource;\r\n\r\n        //////////////\r\n\r\n        function initHub(callback) {\r\n            initializeHub(Umbraco.Sys.ServerVariables.uSync.signalRHub, callback);\r\n        }\r\n\r\n        function initializeHub(url, callback) { \r\n\r\n            callbacks.push(callback);\r\n\r\n            if (!starting) {\r\n                if ($.connection === undefined) {\r\n                    starting = true;\r\n\r\n                    var promises = [];\r\n                    scripts.forEach(function (script) {\r\n                        promises.push(assetsService.loadJs(script));\r\n                    });\r\n\r\n                    $q.all(promises)\r\n                        .then(function () {\r\n                            while (callbacks.length) {\r\n                                var cb = callbacks.pop();\r\n                                hubSetup(url, cb);\r\n                            }\r\n                            starting = false;\r\n                        });\r\n                }\r\n                else {\r\n                    while (callbacks.length) {\r\n                        var cb = callbacks.pop();\r\n                        hubSetup(url, cb);\r\n                    }\r\n                    starting = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hubSetup(url, callback) {\r\n\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(url)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            var hub = {};\r\n\r\n            if ($.connection !== undefined) {\r\n                hub = {\r\n                    active: true,\r\n                    start: function (cb) {\r\n\r\n                        try {\r\n                            $.connection.start().then(function () {\r\n                                // console.info('Hub started', $.connection.connectionId);\r\n                                if (cb) {\r\n                                    cb(true);\r\n                                }\r\n                            }).catch(function () {\r\n                                console.warn('Failed to start hub');\r\n                                if (cb) {\r\n                                    cb(false);\r\n                                }\r\n                            });\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                            if (cd) {\r\n                                cb(false);\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    on: function (eventName, callback) {\r\n                        $.connection.on(eventName, function (result) {\r\n                            $rootScope.$apply(function () {\r\n                                if (callback) {\r\n                                    callback(result);\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    invoke: function (methodName, callback) {\r\n                        $.connection.invoke(methodName)\r\n                            .done(function (result) {\r\n                                $rootScope.$apply(function () {\r\n                                    if (callback) {\r\n                                        callback(result);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                hub = {\r\n                    on: function () { },\r\n                    invoke: function () { },\r\n                    start: function () { console.warn('no hub to start - missing signalR library ?'); }\r\n                };\r\n            }\r\n\r\n            return callback(hub);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco.resources')\r\n        .factory('uSyncHub', uSyncHub);\r\n})();","/**\r\n * @ngdoc\r\n * @name uSync8Service\r\n * @requires $http\r\n * \r\n * @description provides the link to the uSync api elements\r\n *              required for the dashboard to function\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function uSyncServiceController($http, $q) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSync.uSyncService;\r\n\r\n        var service = {\r\n            getSettings: getSettings,\r\n            getChangedSettings: getChangedSettings,\r\n            getHandlers: getHandlers,\r\n            getHandlerSetSettings: getHandlerSetSettings,\r\n\r\n            getDefaultSet: getDefaultSet,\r\n            getSets: getSets,\r\n            getSelectableSets: getSelectableSets,\r\n\r\n            report: report,\r\n            exportItems: exportItems,\r\n            importItems: importItems,\r\n            importItem: importItem,\r\n            saveSettings: saveSettings,\r\n\r\n            getActionHandlers: getActionHandlers,\r\n            reportHandler: reportHandler,\r\n            importHandler: importHandler,\r\n            importPost: importPost,\r\n            exportHandler: exportHandler,\r\n            cleanExport: cleanExport,\r\n\r\n            startProcess: startProcess,\r\n            finishProcess: finishProcess,\r\n\r\n            getLoadedHandlers: getLoadedHandlers,\r\n            getAddOns: getAddOns,\r\n            getAddOnSplash: getAddOnSplash,\r\n\r\n            getHandlerGroups: getHandlerGroups,\r\n\r\n            getSyncWarnings: getSyncWarnings,\r\n\r\n            checkVersion: checkVersion,\r\n\r\n            downloadExport: downloadExport\r\n\r\n        };\r\n\r\n        return service;\r\n\r\n        /////////////////////\r\n\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + 'GetSettings');\r\n        }\r\n\r\n        function getDefaultSet() {\r\n            return $http.get(serviceRoot + 'GetDefaultSet');\r\n        }\r\n\r\n        function getSets() {\r\n            return $http.get(serviceRoot + 'GetSets');\r\n        }\r\n\r\n        function getSelectableSets() {\r\n            return $http.get(serviceRoot + 'GetSelectableSets');\r\n        }\r\n\r\n        function getChangedSettings() {\r\n            return $http.get(serviceRoot + 'GetChangedSettings');\r\n        }\r\n\r\n        function getHandlerSetSettings(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerSetSettings?id=' + set);\r\n        }\r\n\r\n        function getHandlers(set) {\r\n            return $http.get(serviceRoot + 'GetHandlers?set=' + set);\r\n        }\r\n\r\n        function getLoadedHandlers() {\r\n            return $http.get(serviceRoot + 'GetLoadedHandlers');\r\n        }\r\n\r\n        function getAddOns() {\r\n            return $http.get(serviceRoot + 'GetAddOns');\r\n        }\r\n\r\n        function getAddOnSplash() {\r\n            return $http.get(serviceRoot + 'GetAddOnSplash');\r\n        }\r\n\r\n\r\n        function report(group, clientId) {\r\n            return $http.post(serviceRoot + 'report', { clientId: clientId, group: group });\r\n        }\r\n\r\n        function exportItems (clientId, clean) {\r\n            return $http.post(serviceRoot + 'export', { clientId: clientId, clean: clean });\r\n        }\r\n\r\n        function importItems(force, set, group, clientId) {\r\n            return $http.put(serviceRoot + 'import',\r\n                {\r\n                    force: force,\r\n                    set: set,\r\n                    group: group,\r\n                    clientId: clientId,\r\n                });\r\n        }\r\n\r\n        function getSyncWarnings(action, group) {\r\n            return $http.post(serviceRoot + 'GetSyncWarnings?action=' + action, {\r\n                group: group\r\n            });\r\n        }\r\n        \r\n\r\n        function importItem(item) {\r\n            return $http.put(serviceRoot + 'importItem', item);\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(serviceRoot + 'savesettings', settings);\r\n        }\r\n\r\n        function getHandlerGroups(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerGroups?set=' + set);\r\n        }\r\n\r\n        function checkVersion() {\r\n            return $http.get(serviceRoot + 'CheckVersion');\r\n        }\r\n\r\n\r\n        function getActionHandlers(options) {\r\n            return $http.post(serviceRoot + 'GetActionHandlers?action=' + options.action,\r\n                {\r\n                    group: options.group,\r\n                    set: options.set\r\n                });\r\n        }\r\n\r\n        function reportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ReportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                folder: options.folder\r\n            });\r\n        }\r\n\r\n        function importHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                force: options.force,\r\n                set: options.set,\r\n                folder: options.folder\r\n            });\r\n        }\r\n\r\n        function importPost(actions, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportPost', {\r\n                actions: actions,\r\n                clientId: clientId,\r\n                set: options.set,\r\n                folder: options.folder\r\n            });\r\n        }\r\n\r\n        function exportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ExportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                set: options.set,\r\n                folder: options.folder\r\n            });\r\n        }\r\n\r\n        function startProcess(action) {\r\n            return $http.post(serviceRoot + 'StartProcess?action=' + action);\r\n        }\r\n\r\n        function finishProcess(action, actions) {\r\n            return $http.post(serviceRoot + 'FinishProcess?action=' + action, actions);\r\n        }\r\n\r\n        function cleanExport() {\r\n            return $http.post(serviceRoot + 'cleanExport');\r\n        }\r\n\r\n        function downloadExport() {\r\n            return downloadPost(serviceRoot + 'downloadExport');\r\n        }\r\n\r\n\r\n\r\n        /*\r\n         * Downloads a file to the client using AJAX/XHR\r\n         * Based on an implementation here: web.student.tuwien.ac.at/~e0427417/jsdownload.html\r\n         * See https://stackoverflow.com/a/24129082/694494\r\n         */\r\n        function downloadPost(httpPath, payload) {\r\n\r\n            // Use an arraybuffer\r\n            return $http.post(httpPath, payload, { responseType: 'arraybuffer' })\r\n                .then(function (response) {\r\n\r\n                    var octetStreamMime = 'application/octet-stream';\r\n                    var success = false;\r\n\r\n                    // Get the headers\r\n                    var headers = response.headers();\r\n\r\n                    // Get the filename from the header or default to \"download.bin\"\r\n                    var filename = getFileName(headers);\r\n\r\n                    // Determine the content type from the header or default to \"application/octet-stream\"\r\n                    var contentType = headers['content-type'] || octetStreamMime;\r\n\r\n                    try {\r\n                        // Try using msSaveBlob if supported\r\n                        let blob = new Blob([response.data], { type: contentType });\r\n                        if (navigator.msSaveBlob)\r\n                            navigator.msSaveBlob(blob, filename);\r\n                        else {\r\n                            // Try using other saveBlob implementations, if available\r\n                            var saveBlob = navigator.webkitSaveBlob || navigator.mozSaveBlob || navigator.saveBlob;\r\n                            if (saveBlob === undefined) throw \"Not supported\";\r\n                            saveBlob(blob, filename);\r\n                        }\r\n                        success = true;\r\n                    } catch (ex) {\r\n                        console.log(\"saveBlob method failed with the following exception:\");\r\n                        console.log(ex);\r\n                    }\r\n\r\n                    if (!success) {\r\n                        // Get the blob url creator\r\n                        var urlCreator = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n                        if (urlCreator) {\r\n                            // Try to use a download link\r\n                            var link = document.createElement('a');\r\n                            if ('download' in link) {\r\n                                // Try to simulate a click\r\n                                try {\r\n                                    // Prepare a blob URL\r\n                                    let blob = new Blob([response.data], { type: contentType });\r\n                                    let url = urlCreator.createObjectURL(blob);\r\n                                    link.setAttribute('href', url);\r\n\r\n                                    // Set the download attribute (Supported in Chrome 14+ / Firefox 20+)\r\n                                    link.setAttribute(\"download\", filename);\r\n\r\n                                    // Simulate clicking the download link\r\n                                    var event = document.createEvent('MouseEvents');\r\n                                    event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n                                    link.dispatchEvent(event);\r\n                                    success = true;\r\n\r\n                                } catch (ex) {\r\n                                    console.log(\"Download link method with simulated click failed with the following exception:\");\r\n                                    console.log(ex);\r\n                                }\r\n                            }\r\n\r\n                            if (!success) {\r\n                                // Fallback to window.location method\r\n                                try {\r\n                                    // Prepare a blob URL\r\n                                    // Use application/octet-stream when using window.location to force download\r\n                                    let blob = new Blob([response.data], { type: octetStreamMime });\r\n                                    let url = urlCreator.createObjectURL(blob);\r\n                                    window.location = url;\r\n                                    success = true;\r\n                                } catch (ex) {\r\n                                    console.log(\"Download link method with window.location failed with the following exception:\");\r\n                                    console.log(ex);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    if (!success) {\r\n                        // Fallback to window.open method\r\n                        window.open(httpPath, '_blank', '');\r\n                    }\r\n\r\n                    return $q.resolve();\r\n\r\n                }, function (response) {\r\n\r\n                    return $q.reject({\r\n                        errorMsg: \"An error occurred downloading the file\",\r\n                        data: response.data,\r\n                        status: response.status\r\n                    });\r\n                });\r\n        }\r\n\r\n\r\n        function getFileName(headers) {\r\n            var disposition = headers[\"content-disposition\"];\r\n            if (disposition && disposition.indexOf('attachment') !== -1) {\r\n                var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\r\n                var matches = filenameRegex.exec(disposition);\r\n                if (matches != null && matches[1]) {\r\n                    return matches[1].replace(/['\"]/g, '');\r\n                }\r\n            }\r\n\r\n            return \"usync_export.zip\";\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco.services')\r\n        .factory('uSync8DashboardService', uSyncServiceController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncProgressViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.progressview.html',\r\n        bindings: {\r\n            status: '<',\r\n            update: '<',\r\n            hideLabels: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncProgressViewController\r\n    };\r\n\r\n    function uSyncProgressViewController() {\r\n        var vm = this;\r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(status) {\r\n            if (status !== undefined && status.count !== undefined) {\r\n                return (100 * status.count) / status.total;\r\n            }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncProgressView', uSyncProgressViewComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncReportViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.reportview.html',\r\n        bindings: {\r\n            action: '<',\r\n            results: '<',\r\n            hideAction: '<',\r\n            hideLink: '<',\r\n            showAll: '<',\r\n            hideToggle: '<',\r\n            allowSelect: '<',\r\n            selection: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncReportViewController\r\n    };\r\n\r\n    function uSyncReportViewController($scope, editorService,\r\n        overlayService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.showChange = showChange;\r\n        vm.getIcon = getIcon;\r\n        vm.getChangeClass = getChangeClass;\r\n        vm.getTypeName = getTypeName;\r\n        vm.countChanges = countChanges;\r\n        vm.openDetail = openDetail;\r\n        vm.showAll = vm.showAll || false;\r\n\r\n        vm.$onInit = function () {\r\n            vm.hideLink = vm.hideLink ? true : false;\r\n            vm.hideAction = vm.hideAction ? true : false;\r\n        };\r\n\r\n\r\n        vm.apply = apply;\r\n        vm.status = status;\r\n\r\n        /////////\r\n\r\n        function showChange(change) {\r\n            return vm.showAll && change !== 'Hidden' || (change !== 'NoChange' && change !== 'Removed' && change !== 'Hidden');\r\n        }\r\n\r\n        function hasFailedDetail(details) {\r\n            if (details == null || details.length == 0) {\r\n                return false;\r\n            }\r\n\r\n            return details.some(function (detail) {\r\n                return !detail.success;\r\n            })\r\n        }\r\n\r\n        function getChangeClass(result) {\r\n\r\n            var classString = '';\r\n            if (vm.allowSelect || result.exception != null) {\r\n                classString = '-usync-can-select ';\r\n            }\r\n\r\n            if (result.__selected) {\r\n                classString += '-selected '\r\n            }\r\n\r\n            if (!result.success) {\r\n                return classString + 'usync-change-row-Fail';\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return classString + ' usync-change-row-Warn';\r\n            }\r\n\r\n            return classString + ' usync-change-row-' + result.change;\r\n        }\r\n\r\n        function getIcon(result) {\r\n            if (!result.success) {\r\n                return \"icon-delete color-red\";\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return \"icon-alert color-yellow\";\r\n            }\r\n            switch (result.change) {\r\n                case 'NoChange':\r\n                    return 'icon-check color-grey';\r\n                case 'Update':\r\n                    return 'icon-check color-orange';\r\n                case 'Delete':\r\n                    return 'icon-delete color-red';\r\n                case 'Import':\r\n                    return 'icon-check color-green';\r\n                case 'Export':\r\n                    return 'icon-check color-green';\r\n                case 'Information':\r\n                    return 'icon-info color-blue';\r\n                case 'Create':\r\n                    return 'icon-light-up color-green';\r\n                default:\r\n                    return 'icon-flag color-red';\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            if (typeName !== undefined) {\r\n                return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n            }\r\n            return \"??\";\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange' && val.change !== 'Hidden') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function apply(item) {\r\n\r\n            // do some application thing (apply just one item)\r\n            item.applyState = 'busy';\r\n            uSync8DashboardService.importItem(item)\r\n                .then(function (result) {\r\n                    item.applyState = 'success';\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    item.applyState = 'error';\r\n                });\r\n        }\r\n\r\n        vm.select = select;\r\n\r\n        function select(item) {\r\n            if (vm.allowSelect && vm.selection !== undefined) {\r\n                var index = _.findIndex(vm.selection,\r\n                    (x) => (x.key == item.key && x.name == item.name)\r\n                );\r\n                if (index === -1) {\r\n                    vm.selection.push(item);\r\n                    item.__selected = true;\r\n                }\r\n                else {\r\n                    vm.selection.splice(index, 1);\r\n                    item.__selected = false; \r\n                }\r\n            }\r\n\r\n            if (item.exception != null) {\r\n\r\n                overlayService.open({\r\n                    view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/itemdialog.html',\r\n                    title: item.name,\r\n                    item: item,\r\n                    exception: item.exception,\r\n                    size: 'usync-error',\r\n                    disableBackdropClick: true,\r\n                    disableEscKey: true,\r\n                    disableSubmitButton: true,\r\n                    closeButtonLabelKey: 'general_close',\r\n                    close: function () {\r\n                        overlayService.close();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function status(item) {\r\n            if (item.applyState === undefined) return 'init';\r\n            return item.applyState;\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncReportView', uSyncReportViewComponent);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function expansionController($scope, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        ///\r\n\r\n        uSync8DashboardService.getAddOnSplash()\r\n            .then(function (result) {\r\n                vm.addons = result.data;\r\n                vm.loading = false;\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExpansionController', expansionController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function importDialogController($scope, Upload, notificationsService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.close = close;\r\n        vm.submit = submit;\r\n\r\n        vm.errors = [];\r\n        vm.uploaded = false; \r\n        vm.success = false; \r\n\r\n        vm.buttonState = 'init';\r\n        vm.file = null;\r\n        vm.handleFiles = handleFiles;\r\n        vm.upload = upload;\r\n\r\n        ////////\r\n\r\n        function handleFiles(files, event) {\r\n            if (files && files.length > 0) {\r\n                vm.file = files[0];\r\n            }\r\n        }\r\n\r\n        function upload(file) {\r\n            vm.buttonState = 'busy';\r\n\r\n            Upload.upload({\r\n                url: Umbraco.Sys.ServerVariables.uSync.uSyncService + 'UploadImport',\r\n                fields: {\r\n                    clean: vm.cleanImport\r\n                },\r\n                file: file\r\n            }).success(function (data, status, headers, config) {\r\n                vm.uploaded = true;\r\n                vm.success = data.success;\r\n\r\n                if (data.success) {\r\n                    vm.buttonState = 'success';\r\n                }\r\n                else {\r\n                    vm.buttonState = 'error';\r\n                    vm.errors = data.errors; \r\n                }\r\n            }).error(function (event, status, headers, config) {\r\n                vm.uploaded = true;\r\n                vm.success = false; \r\n                vm.buttonState = 'error';\r\n                notificationsService.error('error', 'Failed to upload '\r\n                    + status + ' ' + event.ExceptionMessage);\r\n\r\n                vm.errors.push('Zip file upload error ' + \r\n                    '[' + status + '] ' +\r\n                    event.ExceptionMessage);\r\n            });\r\n        }\r\n\r\n\r\n        ////////\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function submit(action) {\r\n            if ($scope.model.submit) {\r\n                $scope.model.submit(action);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncImportDialogController', importDialogController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope,\r\n        uSync8DashboardService,\r\n        overlayService,\r\n        notificationsService) {\r\n\r\n        var vm = this;\r\n        vm.working = false;\r\n        vm.loading = true;\r\n        vm.readonly = true;\r\n\r\n        vm.docslink = \"https://docs.jumoo.co.uk/usync/reference/config/\";\r\n\r\n        vm.umbracoVersion = Umbraco.Sys.ServerVariables.application.version;\r\n\r\n        vm.saveSettings = saveSettings;\r\n        vm.openAppSettingsOverlay = openAppSettingsOverlay;\r\n\r\n        init();\r\n\r\n        ///////////\r\n\r\n        function init() {\r\n            getSettings();\r\n            getSets();\r\n        }\r\n\r\n        ///////////\r\n        function getSettings() {\r\n\r\n            uSync8DashboardService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                    vm.loading = false;\r\n                    getHandlerSetSettings(vm.settings.defaultSet);\r\n                });\r\n        }\r\n\r\n        function getHandlerSetSettings(setname) {\r\n\r\n            uSync8DashboardService.getHandlerSetSettings(setname)\r\n                .then(function (result) {\r\n                    vm.handlerSet = result.data;\r\n                });\r\n\r\n        }\r\n\r\n        function getSets() {\r\n            uSync8DashboardService.getSets()\r\n                .then(function (result) {\r\n                    vm.sets = result.data;\r\n                    // console.log(result.data);\r\n                })\r\n        }\r\n\r\n        function saveSettings() {\r\n            vm.working = false;\r\n            uSync8DashboardService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    notificationsService.success('Saved', 'Settings updated');\r\n                }, function (error) {\r\n                    notificationsService.error('Saving', error.data.Message);\r\n                });\r\n        }\r\n\r\n\r\n\r\n        function openAppSettingsOverlay() {\r\n\r\n            uSync8DashboardService.getChangedSettings()\r\n                .then(function (result) {\r\n                    var appSetting = {\r\n                        \"uSync\": toPascal(result.data)\r\n                    }\r\n\r\n                    var options = {\r\n                        view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.overlay.html',\r\n                        title: 'appsettings.json snipped',\r\n                        content: JSON.stringify(appSetting, null, 4),\r\n                        docslink: vm.docslink,\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        hideSubmitButton: true,\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    };\r\n\r\n                    overlayService.confirm(options);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function toPascal(o) {\r\n            var newO, origKey, newKey, value\r\n            if (o instanceof Array) {\r\n                return o.map(function (value) {\r\n                    if (typeof value === \"object\") {\r\n                        value = toCamel(value)\r\n                    }\r\n                    return value\r\n                })\r\n            } else {\r\n                newO = {}\r\n                for (origKey in o) {\r\n                    if (o.hasOwnProperty(origKey)) {\r\n                        newKey = (origKey.charAt(0).toUpperCase() + origKey.slice(1) || origKey).toString()\r\n                        value = o[origKey]\r\n                        if (value instanceof Array || (value !== null && value.constructor === Object)) {\r\n                            value = toPascal(value)\r\n                        }\r\n                        newO[newKey] = value\r\n                    }\r\n                }\r\n            }\r\n            return newO\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsController', settingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncController($scope, $q, $controller,\r\n        eventsService,\r\n        overlayService,\r\n        notificationsService,\r\n        localizationService,\r\n        editorService,\r\n        uSync8DashboardService,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n        vm.fresh = true;\r\n        vm.loading = true;\r\n        vm.versionLoaded = false;\r\n        vm.working = false;\r\n        vm.reported = false;\r\n        vm.syncing = false;\r\n        vm.hideLink = false;\r\n        vm.showSpinner = false;\r\n        vm.showEverything = true;\r\n\r\n        vm.selection = [];\r\n\r\n        vm.groups = [];\r\n        vm.perf = 0;\r\n\r\n        vm.showAdvanced = false;\r\n        vm.hasuSyncForms = false;\r\n        vm.canHaveForms = false;\r\n\r\n        var modes = {\r\n            NONE: 0,\r\n            REPORT: 1,\r\n            IMPORT: 2,\r\n            EXPORT: 3\r\n        };\r\n\r\n        vm.runmode = modes.NONE;\r\n\r\n        vm.showAll = false;\r\n        vm.status = {};\r\n        vm.reportAction = '';\r\n\r\n        vm.everything = {\r\n            icon: 'icon-paper-plane-alt color-deep-orange',\r\n            name: 'Everything',\r\n            group: '',\r\n            state: 'init',\r\n            key: 'everything'\r\n        }\r\n\r\n        vm.everything.import = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_import',\r\n                handler: function () { importItems(false, vm.everything); }\r\n            },\r\n            subButtons: [\r\n                {\r\n                    labelKey: 'usync_importforce',\r\n                    handler: function () { importForce(vm.everything); }\r\n                }]\r\n        };\r\n\r\n        vm.everything.export = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_export',\r\n                handler: function () { exportGroup(vm.everything); }\r\n            },\r\n            subButtons: [\r\n                {\r\n                    labelKey: 'usync_exportClean',\r\n                    handler: function () { cleanExport(); }\r\n                }\r\n            ]\r\n        }\r\n\r\n        vm.report = report;\r\n        vm.versionInfo = {\r\n            IsCurrent: true\r\n        };\r\n\r\n        vm.importForce = importForce;\r\n        vm.importItems = importItems;\r\n        vm.importGroup = importGroup;\r\n        vm.exportGroup = exportGroup;\r\n\r\n        vm.getTypeName = getTypeName;\r\n\r\n        vm.showChange = showChange;\r\n        vm.countChanges = countChanges;\r\n        vm.calcPercentage = calcPercentage;\r\n        vm.openDetail = openDetail;\r\n\r\n        vm.changeSet = changeSet;\r\n\r\n        vm.downloadExportFolder = downloadExportFolder;\r\n\r\n        init();\r\n\r\n        function init() {\r\n            InitHub();\r\n            loadSavingsMessages();\r\n\r\n            uSync8DashboardService.getDefaultSet()\r\n                .then(function (result) {\r\n                    vm.currentSet = result.data;\r\n                    initSet(vm.currentSet);\r\n                });\r\n\r\n            uSync8DashboardService.getSelectableSets()\r\n                .then(function (result) {\r\n                    vm.sets = result.data;\r\n                });\r\n\r\n            uSync8DashboardService.checkVersion()\r\n                .then(function (result) {\r\n                    vm.versionLoaded = true;\r\n                    vm.versionInfo = result.data;\r\n                });\r\n\r\n\r\n            if (Umbraco.Sys.ServerVariables.uSync.showFileActions) {\r\n                vm.everything.import.subButtons.push({\r\n                    labelKey: 'usync_importFile',\r\n                    handler: function () { importFile(vm.everything) }\r\n                });\r\n\r\n                vm.everything.export.subButtons.push({\r\n                    labelKey: 'usync_exportFile',\r\n                    handler: function () { exportFile(vm.everything); }\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        function initSet(setname) {\r\n\r\n            vm.loading = true;\r\n\r\n            getHandlerGroups();\r\n\r\n            // just so there is something there when you start\r\n            uSync8DashboardService.getHandlers(setname)\r\n                .then(function (result) {\r\n                    vm.handlers = result.data;\r\n                    vm.status.handlers = vm.handlers;\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n\r\n        function performAction(options, actionMethod, cb) {\r\n\r\n            return $q(function (resolve, reject) {\r\n                uSync8DashboardService.getActionHandlers(options)\r\n                    .then(function (result) {\r\n                        vm.status.handlers = result.data;\r\n                        performHandlerAction(vm.status.handlers, actionMethod, options, cb)\r\n                            .then(function () {\r\n                                resolve();\r\n                            }, function (error) {\r\n                                reject(error)\r\n                            })\r\n                    });\r\n            });\r\n        }\r\n\r\n        function performHandlerAction(handlers, actionMethod, options, cb) {\r\n\r\n\r\n            return $q(function (resolve, reject) {\r\n\r\n                var index = 0;\r\n                vm.status.message = 'Starting ' + options.action;\r\n                vm.status.total = handlers.length - 1;\r\n\r\n                uSync8DashboardService.startProcess(options.action)\r\n                    .then(function () {\r\n                        runHandlerAction(handlers[index])\r\n                    });\r\n\r\n                function runHandlerAction(handler) {\r\n\r\n                    vm.status.message = handler.name;\r\n\r\n                    handler.status = 1;\r\n                    actionMethod(handler.alias, options, getClientId())\r\n                        .then(function (result) {\r\n\r\n                            vm.results = vm.results.concat(result.data.actions);\r\n\r\n                            handler.status = 2;\r\n                            handler.changes = countChanges(result.data.actions);\r\n\r\n                            index++;\r\n                            vm.status.count = index;\r\n\r\n                            if (index < handlers.length) {\r\n                                runHandlerAction(handlers[index]);\r\n                            }\r\n                            else {\r\n\r\n                                vm.status.message = 'Finishing ' + options.action;\r\n\r\n                                uSync8DashboardService.finishProcess(options.action, vm.results)\r\n                                    .then(function () {\r\n                                        resolve();\r\n                                    });\r\n                            }\r\n                        }, function (error) {\r\n                            // error in this handler ? \r\n                            // do we want to carry on with the other ones or just stop?\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n        function report(group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n\r\n            resetStatus(modes.REPORT);\r\n            getWarnings('report');\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'report',\r\n                group: group.group,\r\n                set: vm.currentSet\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.reportHandler)\r\n                .then(function (results) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n                    vm.status.message = 'Report complete';\r\n                    group.state = 'success';\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function importForce(group) {\r\n            importItems(true, group);\r\n        }\r\n\r\n        function importItems(force, group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.IMPORT);\r\n            getWarnings('import');\r\n\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'import',\r\n                group: group.group,\r\n                force: force,\r\n                set: vm.currentSet\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.importHandler)\r\n                .then(function (results) {\r\n\r\n                    vm.status.message = 'Post import actions';\r\n\r\n                    uSync8DashboardService.importPost(vm.results, options, getClientId())\r\n                        .then(function (results) {\r\n                            vm.working = false;\r\n                            vm.reported = true;\r\n                            vm.perf = performance.now() - start;\r\n                            group.state = 'success';\r\n                            eventsService.emit('usync-dashboard.import.complete');\r\n                            calculateTimeSaved(vm.results);\r\n                            vm.status.message = 'Complete';\r\n                        });\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    vm.group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function exportGroup(group, cb) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.EXPORT);\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'export',\r\n                group: group.group,\r\n                set: vm.currentSet\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.exportHandler)\r\n                .then(function (results) {\r\n                    vm.status.message = 'Export complete';\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n\r\n                    group.state = 'success';\r\n                    vm.savings.show = true;\r\n                    vm.savings.title = 'All items exported.';\r\n                    vm.savings.message = 'Now go wash your hands 🧼!';\r\n                    eventsService.emit('usync-dashboard.export.complete');\r\n\r\n                    if (cb) { cb(); }\r\n\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function cleanExport() {\r\n\r\n            localizationService.localizeMany([\"usync_cleanTitle\",\r\n                \"usync_cleanMsg\", \"usync_cleanSubmit\", \"usync_cleanClose\"])\r\n                .then(function (values) {\r\n\r\n\r\n                    overlayService.open({\r\n                        title: values[0],\r\n                        content: values[1],\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        submitButtonLabel: values[2],\r\n                        closeButtonLabel: values[3],\r\n                        submit: function () {\r\n                            overlayService.close();\r\n\r\n                            uSync8DashboardService.cleanExport()\r\n                                .then(function () {\r\n                                    exportGroup(vm.everything);\r\n                                });\r\n                        },\r\n                        close: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    });\r\n                });\r\n        }\r\n\r\n        var overlayView =\r\n            Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/overlay.html';\r\n\r\n\r\n        function exportFile(group) {\r\n\r\n            localizationService.localizeMany([\r\n                \"usync_exportFile\",\r\n                \"usync_exportFileMsg\",\r\n                \"usync_export\", \"general_close\"])\r\n                .then(function (values) {\r\n\r\n                    overlayService.open({\r\n                        view: overlayView,\r\n                        title: values[0],\r\n                        content: values[1],\r\n                        submitButtonLabel: values[2],\r\n                        closeButtonLabel: values[3],\r\n                        submit: function () {\r\n                            overlayService.close();\r\n\r\n                            uSync8DashboardService.cleanExport()\r\n                                .then(function () {\r\n                                    exportGroup(group, function () {\r\n                                        getExportFolderAsFile();\r\n                                    });\r\n                                });\r\n                        },\r\n                        close: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    });\r\n                });\r\n        }\r\n\r\n        function downloadExportFolder() {\r\n\r\n            localizationService.localizeMany([\r\n                \"usync_downloadTitle\",\r\n                \"usync_downloadMsg\",\r\n                \"usync_download\", \"general_close\"])\r\n                .then(function (values) {\r\n\r\n                    overlayService.open({\r\n                        view: overlayView,\r\n                        title: values[0],\r\n                        content: values[1],\r\n                        submitButtonLabel: values[2],\r\n                        closeButtonLabel: values[3],\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                            getExportFolderAsFile();\r\n                        },\r\n                        close: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    });\r\n                });\r\n        }\r\n\r\n        function getExportFolderAsFile() {\r\n            uSync8DashboardService.downloadExport()\r\n                .then(function (result) {\r\n                    console.log('done');\r\n                });\r\n        }\r\n\r\n        function importFile(group) {\r\n\r\n            editorService.open({\r\n                title: 'Import from file',\r\n                size: 'small',\r\n                view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/importDialog.html',\r\n                submit: function (action) {\r\n                    editorService.close();\r\n                    console.log(action);\r\n\r\n                    if (action == 'import ') {\r\n                        importItems(false, group);\r\n                    }\r\n                    else {\r\n                        report(group);\r\n                    }\r\n                },\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        // add a little joy to the process.\r\n        function calculateTimeSaved(results) {\r\n            var changes = countChanges(results);\r\n            var time = changes * 26.5;\r\n\r\n            var duration = moment.duration(time, 'seconds');\r\n\r\n            if (time >= 180) {\r\n                vm.savings.show = true;\r\n\r\n                vm.savings.title = 'You just saved about ' + duration.humanize() + \"!\";\r\n                vm.savings.message = '';\r\n\r\n                for (let x = 0; x < vm.godo.length; x++) {\r\n                    if (vm.godo[x].time < time) {\r\n                        vm.savings.message = vm.godo[x].message;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //////////////\r\n\r\n        function getWarnings(action) {\r\n            uSync8DashboardService.getSyncWarnings(action)\r\n                .then(function (result) {\r\n                    vm.warnings = result.data;\r\n                });\r\n        }\r\n\r\n        vm.importGroup = {};\r\n        vm.exportButtons = {};\r\n\r\n        function getHandlerGroups() {\r\n            vm.showEverything = false;\r\n            vm.groups = [];\r\n\r\n            uSync8DashboardService.getHandlerGroups(vm.currentSet)\r\n                .then(function (result) {\r\n\r\n                    var groups = result.data;\r\n                    var isSingle = Object.keys(groups).length === 1;\r\n\r\n                    _.forEach(groups, function (icon, group) {\r\n                        if (group == '_everything') {\r\n                            vm.showEverything = true;\r\n                        }\r\n                        else {\r\n\r\n                            var groupInfo = {\r\n                                name: group,\r\n                                group: group,\r\n                                icon: icon,\r\n                                key: group.toLowerCase(),\r\n                                state: 'init'\r\n                            }\r\n\r\n                            groupInfo.import = {\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_import',\r\n                                    handler: function () { importGroup(groupInfo) }\r\n                                },\r\n                                subButtons: [{\r\n                                    labelKey: 'usync_importforce',\r\n                                    handler: function () { importForce(groupInfo) }\r\n                                }]\r\n                            };\r\n\r\n                            groupInfo.export = {\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_export',\r\n                                    handler: function () { exportGroup(groupInfo) }\r\n                                }\r\n                            };\r\n\r\n\r\n                            if (isSingle) {\r\n                                groupInfo.export.subButtons = [{\r\n                                    labelKey: 'usync_exportClean',\r\n                                    handler: function () {\r\n                                        cleanExport();\r\n                                    }\r\n                                }];\r\n                            }\r\n\r\n                            vm.groups.push(groupInfo);\r\n\r\n                            if (group.toLowerCase() === \"forms\") {\r\n                                vm.hasuSyncForms = true;\r\n                            }\r\n                        }\r\n\r\n                    });\r\n\r\n                    if (vm.showEverything) {\r\n                        vm.groups.push(vm.everything);\r\n                    }\r\n\r\n                    if (!vm.hasuSyncForms) {\r\n                        vm.canHaveForms = canHaveForms();\r\n                    }\r\n\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function importGroup(group) {\r\n            importItems(false, group);\r\n        }\r\n\r\n        //////////////\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: \"/App_Plugins/uSync/changeDialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(0, typeName.indexOf(','));\r\n            return umbType.substring(umbType.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange' && val.change !== 'Hidden') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function calcPercentage(status) {\r\n            return (100 * status.count) / status.Total;\r\n        }\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function setFilter(type) {\r\n\r\n            if (vm.filter === type) {\r\n                vm.filter = '';\r\n            }\r\n            else {\r\n                vm.filter = type;\r\n            }\r\n        }\r\n\r\n        ///////////\r\n\r\n        /// resets all the flags, and messages to the start \r\n        function resetStatus(mode) {\r\n\r\n            vm.fresh = false;\r\n            vm.warnings = {};\r\n\r\n            vm.reported = vm.showAll = false;\r\n            vm.working = true;\r\n            vm.showSpinner = false;\r\n            vm.runmode = mode;\r\n            vm.hideLink = false;\r\n            vm.savings.show = false;\r\n\r\n            vm.status = {\r\n                count: 0,\r\n                total: 1,\r\n                message: 'Initializing',\r\n                handlers: vm.handlers\r\n            };\r\n\r\n            if (!vm.hub.active) {\r\n                vm.status.Message = 'Working ';\r\n                vm.showSpinner = true;\r\n            }\r\n\r\n            vm.update = {\r\n                message: '',\r\n                count: 0,\r\n                total: 1\r\n            };\r\n\r\n            // performance timer. \r\n            vm.perf = 0;\r\n\r\n\r\n            switch (mode) {\r\n                case modes.IMPORT:\r\n                    vm.action = 'Import';\r\n                    break;\r\n                case mode.REPORT:\r\n                    vm.action = 'Report';\r\n                    break;\r\n                case mode.EXPORT:\r\n                    vm.action = 'Export';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // change the handler set\r\n        function changeSet() {\r\n            vm.reported = false;\r\n            initSet(vm.currentSet);\r\n        }\r\n\r\n        ////// SignalR things \r\n        function InitHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        function canHaveForms() {\r\n            if (vm.hasuSyncForms) return false;\r\n        }\r\n\r\n        function loadSavingsMessages() {\r\n            vm.savings = { show: false, title: \"\", message: \"\" };\r\n            vm.godo = [\r\n                { time: 0, message: \"Worth checking\" },\r\n                { time: 180, message: \"Go make a cup of tea\" },\r\n                { time: 300, message: \"Go have a quick chat\" },\r\n                { time: 900, message: \"Go for a nice walk outside 🚶‍♀️\" },\r\n                { time: 3600, message: \"You deserve a break\" }\r\n            ];\r\n\r\n            var keys = [];\r\n            for (let n = 0; n < 5; n++) {\r\n                keys.push('usync_godo' + n);\r\n            }\r\n            localizationService.localizeMany(keys)\r\n                .then(function (values) {\r\n                    for (let n = 0; n < values.length; n++) {\r\n                        vm.godo[n].message = values[n];\r\n                    }\r\n                });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSync8Controller', uSyncController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dashboardController($controller,\r\n        $scope, $timeout, navigationService, eventsService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        var _settingsFolder = Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings';\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-dashboard.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            title: 'uSync',\r\n            description: '...',\r\n            navigation: [ ]\r\n        };\r\n\r\n        var uSyncSettings = Umbraco.Sys.ServerVariables.uSync;\r\n\r\n        if (!uSyncSettings.disabledDashboard) {\r\n            vm.page.navigation.push({\r\n                'name': 'uSync',\r\n                'alias': 'uSync',\r\n                'icon': 'icon-infinity',\r\n                'view': _settingsFolder + '/default.html',\r\n                'active': true\r\n            });\r\n        }\r\n\r\n        vm.page.navigation.push({\r\n            'name': 'Settings',\r\n            'alias': 'settings',\r\n            'icon': 'icon-settings',\r\n            'view': _settingsFolder + '/settings.html',\r\n        });\r\n\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: \"uSync\", path: \"-1\" });\r\n        });\r\n\r\n        uSync8DashboardService.getAddOns()\r\n            .then(function (result) {\r\n\r\n                vm.version = 'v' + result.data.version;\r\n                if (result.data.addOnString.length > 0) {\r\n                    vm.version += ' + ' + result.data.addOnString;\r\n                }\r\n\r\n                vm.page.description = vm.version;\r\n                vm.addOns = result.data.addOns;\r\n\r\n                var insertOffset = 1;\r\n                if (vm.version.indexOf('Complete') == -1) {\r\n                     insertOffset = 2;\r\n                     vm.page.navigation.push(\r\n                         {\r\n                             'name': 'Add ons',\r\n                             'alias': 'expansion',\r\n                             'icon': 'icon-box',\r\n                             'view': _settingsFolder + '/expansion.html'\r\n                         });\r\n                }\r\n\r\n                vm.addOns.forEach(function (value, key) {\r\n                    if (value.view !== '') {\r\n                        vm.page.navigation.splice(vm.page.navigation.length - insertOffset, 0,\r\n                            {\r\n                                'name': value.displayName,\r\n                                'alias': value.alias,\r\n                                'icon': value.icon,\r\n                                'view': value.view\r\n                            });\r\n                    }\r\n                });\r\n\r\n                vm.page.navigation[0].active = true;\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsDashboardController', dashboardController);\r\n})();"]}